epics:
  - title: VS Code拡張でYAML形式ストーリーのスニペット
    description: |
      このエピックは、VS Code拡張としてYAML形式ストーリーのスニペットを提供し、ユーザーがYAML形式でストーリーを簡単に作成できるようにすることを目的とする。
    stories:
      - title: YAMLスニペットの提供
        as: ユーザー
        i want: VS CodeのYAMLエディタで各種要素（エピック、ストーリー、タスク、サブタスク）のスニペットを利用したい
        so that: 迅速にYAML形式の構造化ストーリーを作成できるように
        status: Done
        points: 8
        sprint: Sprint 1
        definition of done:
          - ユーザーはYAMLファイルの編集中にスニペット候補を呼び出せる（例 Ctrl + Space による補完）
          - 各スニペットは以下の種類に対応している
            - エピック
            - ストーリー
            - タスク
            - サブタスク
          - スニペットはTabキーでフィールド間を移動できるように設定されている
          - スニペット定義は `YAML` 言語に対して有効である
          - 拡張機能のREADMEに使用方法が記載されている

  - title: VS Code拡張でのYAML形式ストーリーのプレビュー
    description: |
      YAML形式のストーリーをVS Code上で視覚的にプレビュー・編集する機能。
    stories:
      - title: テーブル形式プレビュー
        as: ユーザー
        i want: VS CodeのWebView上でYAML形式ストーリーをテーブル形式でプレビューしたい
        so that: ストーリーの構造を表形式で確認できるように
        status: Done
        points: 13
        definition of done:
          - ユーザーはVS CodeのWebView上でYAML形式ストーリーのテーブル形式プレビューを確認できる
          - テーブルにはエピック、ストーリー、タスクの情報が含まれる
          - テーブルの列は Type(Epic,Story,Taskのいずれか)、title, status, points を表示する
          - 各行はストーリーのタイトルとステータスを表示する
          - ２カラム表示で左にテーブル、右にストーリーの詳細を表示する（詳細はストーリーをクリック時に表示）
          - 無効なYAML形式ストーリーの場合、エラーメッセージが表示される
          - プレビューは有効なYAML形式ストーリーのみ更新される
          - プレビューは編集内容をリアルタイムで反映する
      - title: アイテム詳細表示
        as: ユーザー
        i want: VS CodeのWebView上でストーリーをクリックして詳細を表示したい
        so that: YAML形式ストーリーを直接参照することなく詳細を確認できるように
        status: Done
        definition of done:
          - ユーザーはVS CodeのWebView上でストーリーをクリックして詳細を表示できる
          - 詳細には説明、ステータス、ポイントなどが含まれる
          - ポップアップまたは展開セクションは簡単に閉じられる
          - テーブル表示の場合、詳細は右側のカラムに表示される
          - 親アイテムがある場合、その親アイテムのタイトルが表示される（例：Storyの場合、Epicのタイトルが表示される）
          - 子アイテムがある場合、その子アイテムのリストが表示される（例：Epicの場合、Storyのリストが表示される）
      - title: 新規アイテムの追加
        as: ユーザー
        i want: VS CodeのWebView上で新しいエピック、ストーリー、タスクを追加したい
        so that: YAML形式ストーリーを直接編集することなく、新しいアイテムを追加できるように
        status: Done
        definition of Done:
          - ユーザーはVS CodeのWebView上で新しいエピック、ストーリー、タスクを追加できる
          - ユーザーは「Add New Epic」ボタンで Epic を追加できる
          - ユーザーは「Add New Task」ボタンで Task を追加できる
          - ユーザーは Epic の詳細表示の「Add New Story」ボタンで Story を追加できる
          - ユーザーは Story の詳細表示の「Add New Subtask」ボタンで sub task を追加できる
          - 追加するアイテムの詳細はフォーム形式のUIでできる
            - フォームの共通項目
              - title、インプットボックス、必須項目
              - description、テキストエリア、改行で高さを自動調整(field-sizing content)
              - status、ドロップダウン、ToDo,WIP,Doneのいずれか
              - definition of done、テキストエリア、改行で高さを自動調整(field-sizing content)
            - story の項目
              - as, i want, so that、インプットボックス
              - points、インプットボックス、整数、初期値=0
              - sprint、インプットボックス
              - 親epic、ドロップダウン、選択可能なリスト
            - task の項目
              - 親epic、ドロップダウン、選択可能なリスト、ブランクにすることも可能。
              - 親story、ドロップダウン、選択可能なリスト、ブランクにすることも可能
              - 親epic を選択する場合、親story は選択不可（ブランクにする）
              - 親story を選択する場合、親epic は選択不可（ブランクにする）
              - 親がstoryの場合、sub task として扱う
          - 入力時にリアルタイムでバリデーションが行われ、不正な入力にはエラーメッセージが表示される
          - フォームの表示中はストーリーやエピック、タスクの詳細表示は非表示にする
          - 追加した新しいアイテムはプレビューに即時に表示する
          - 追加した新しいアイテムは story.yaml に反映するように更新する
      - title: アイテムの編集
        as: ユーザー
        i want: VS CodeのWebView上でエピック、ストーリー、タスクを編集したい
        so that: YAML形式ストーリーを直接編集することなく、素早に変更できるように
        status: Done
        definition of done:
          - ユーザーはVS CodeのWebView上でエピック、ストーリー、タスクを編集できる
          - 編集内容はUIとYAML形式ストーリーの両方に反映される
          - ユーザーはテーブル上のアイテムをダブルクリック、または「編集」ボタンを押すことで編集モードに切り替えられる。
          - 編集モードではテキストフィールドやセレクトボックスが表示され、保存/キャンセル操作が可能である
      - title: アイテムの削除
        as: ユーザー
        i want: VS CodeのWebView上でエピック、ストーリー、タスクを削除したい
        so that: 不要なコンテンツを視覚的に整理できるように
        status: Done
        definition of done:
          - ユーザーはVS CodeのWebView上でエピック、ストーリー、タスクを削除できる
          - 削除されたアイテムはUIとYAML形式ストーリーから消える
          - ユーザーはアイテムの詳細表示の削除ボタンから削除できる
          - Epic や Story を削除する場合、配下のStoryやTaskも削除対象になることが明示され、確認ダイアログでユーザーの承認を求める
      - title: フィルタリング
        as: ユーザー
        i want: VS CodeのWebView上でストーリーをスプリントやステータスでフィルタリングしたい
        so that: 関心のあるストーリーだけを表示できるように
        status: Done
        definition of done:
          - ユーザーはステータス（ToDo、In Progress、Doneなど）でストーリーを絞り込める。チェックボックスやドロップダウンによる複数選択が可能
          - ユーザーはスプリントでストーリーを絞り込める。スプリント名一覧から選択可能
          - ユーザーはタグやラベルでストーリーを絞り込める。複数タグのAND/OR検索も検討されている
          - ユーザーはタイトルや説明に含まれるキーワードでフリーテキスト検索ができる
          - ユーザーは複数のフィルタ条件（ステータス＋スプリント＋タグなど）を組み合わせて絞り込みできる
          - UI上にフィルター専用パネルがあり、サイドバーや画面上部に設置され操作しやすい
      - title: ドラッグ＆ドロップで並べ替え
        as: ユーザー
        i want: VS CodeのWebView上でエピックやストーリーの順序をドラッグ＆ドロップで並べ替えたい
        so that: YAML形式エピックやストーリーを直接編集することなく、視覚的に変更できるように
        status: Done
        definition of done:
          - 1. ドラッグ操作可能なUI
          - 1.1. ユーザーはVS CodeのWebView上でストーリーをドラッグ＆ドロップで並べ替えできる
          - 1.2. マウス操作で上下に移動できるドラッグハンドルが表示されている
          - 1.3. ハンドルはアイコンや左端など、ユーザーに直感的な場所に配置されている
          - 2. 視覚ガイドの表示
          - 2.1. ドラッグ中、挿入先の位置に ガイドライン（例：青い線） を表示。
          - 2.2. 移動先が入れ子（nested）構造かどうかもビジュアルで区別。
          - 3. 移動完了時のフィードバック
          - 3.1. アイテムが移動完了した瞬間、スムーズなアニメーションで完了を視認可能にする
          - 3.2. 移動元と移動先に一瞬ハイライト表示などの視覚的変化
          - 4. 同一レベルでの並べ替え
          - 4.1. Epic間（epics[]）の並べ替え
          - 4.2. Story間（epics[n].stories[]）の並べ替え
          - 4.3. Task間（stories[n].tasks[]など、構造に応じた配置）
          - 5. 階層構造の変更にも対応
          - 5.1. Storyを別のEpicへ移動可能（→ 親エピックの変更を意味する）
          - 5.2. Taskを別のStoryやEpic配下へ移動可能（→ 親の再構成）
          - 6. YAMLファイルへの反映
          -	6.1. 並べ替え操作後、VS Code拡張側で story.yaml の順序を自動的に更新。
          -	6.2. 並べ替えがUIに反映された後、構文の整ったYAMLとして書き戻す処理が必要。
          -	6.3. 並べ替えは epics[] やその stories[] 配列の順序が保持される形式。
          - 7. 不正な移動操作の制限
          - 7.1. TaskをEpicに直接移動 → ✕（無効）
          - 7.2. Epic内でStoryを重複して保持 → ✕
          - 7.3. 対象構造が破損している場合（YAML不整合）は、並べ替え無効化 or 修復UI提示
          - 8. 並べ替えが確定するタイミング
          - 8.1. ドロップしたタイミングでのみ反映
          - 8.2. 移動中は仮の状態で、確定後にYAML更新
      - title: 親アイテムへのクイックナビゲーション
        as: ユーザー
        i want: アイテム詳細画面で親アイテムの情報を確認し、そこから親アイテムの詳細表示に素早く切り替えたい
        so that: アイテムの階層関係を直感的に把握し、効率的にナビゲーションできるようにするため
        status: Done
        points: 3
        sprint: Sprint 2 # 仮
        definition of done:
          - アイテム詳細表示エリアに、そのアイテムの親が存在する場合のみ、親アイテムのタイトルが表示される
          - 親アイテムのタイトルは、クリック可能なUI（例：リンクやカード）として表示される
          - 親アイテムのタイトルをクリックすると、画面がその親アイテムの詳細表示に切り替わる
          - 親が存在しないトップレベルのアイテム（EpicやTask）の詳細表示では、親アイテムの情報は表示されない
      - title: 子アイテムへのクイックナビゲーション
        as: ユーザー
        i want: アイテム詳細画面で子アイテムのリストを確認し、そこから子アイテムの詳細表示に素早く切り替えたい
        so that: アイテムの階層関係を直感的に把握し、効率的にナビゲーションできるようにするため
        status: ToDo
        points: 3
        sprint: Sprint 2 # 仮
        definition of done:
          - アイテム詳細表示エリアに、そのアイテムの子が存在する場合のみ、子アイテムのタイトルリストが表示される
          - 子アイテムのリストは、クリック可能なUI（例：リストグループ）として表示される
          - 子アイテムのタイトルをクリックすると、画面がその子アイテムの詳細表示に切り替わる
          - 子が存在しないアイテム（Task, SubTask, Storyで子を持たないもの）の詳細表示では、子アイテムのリストは表示されない
      - title: テーブルヘッダーからのフィルタリング機能
        as: ユーザー
        i want: テーブルのヘッダーをクリックしてフィルタリングしたい
        so that: より直感的にデータを絞り込めるように
        status: ToDo
        points: 5
        sprint: Sprint 2
        description: |
          現在のフィルタリングパネルの機能を拡張し、テーブルのヘッダーをクリックすることで各列（Status, Sprintなど）のフィルタリングを直感的に行えるようにする。
          これにより、ユーザーはより少ない操作で目的のデータにたどり着けるようになる。
        definition of done:
          - StoryTableのthead部分をインタラクティブなコンポーネントに変更する
          - ヘッダーセル（Status, Sprint）にonClickイベントを追加し、ドロップダウンメニューを表示する
          - ドロップダウン内には、列に応じたフィルターオプション（チェックボックスやリスト）を配置する
          - フィルター条件が変更されたら、useStoryFilterフックを呼び出してテーブルの表示を更新する
          - 既存のFilterPanelコンポーネントを削除し、App.tsxを修正する
      - title: 選択中のアイテムをテーブルで強調表示
        as: ユーザー
        i want: アイテム詳細で選択中のアイテムが、テーブル上でもハイライト表示されるようにしたい
        so that: どのアイテムの詳細を見ているか、視覚的にすぐにわかるようにするため
        description: |
          アイテム詳細（ItemDetails）でアイテムが選択されているとき、StoryTableの対応する行をハイライトし、ユーザーがどのアイテムを見ているか視覚的に分かりやすくします。
        status: ToDo
        points: 2
        sprint: Sprint 2
        definition of done:
          - StoryDataContextにselectedItemの状態が含まれている
          - StoryTableコンポーネントがuseStoryDataフックからselectedItemを取得する
          - StoryTableで、現在の行のアイテムがselectedItemと一致する場合、特定のCSSクラス（例：`selected-row`）を行（`<tr>`）に適用する
          - App.cssに`.selected-row`のためのハイライトスタイル（背景色など）が定義されている
  - title: 拡張機能の最適化
    description: 拡張機能のパフォーマンスとUXを向上させるための改善を行います。
    stories:
      - title: YAMLファイル編集時のみ拡張機能を有効化
        as: 開発者
        i want: 拡張機能がYAMLファイルを編集している時にのみ有効化されるようにしたい
        so that: VS Codeのリソースを効率的に利用し、他の言語の編集時に不要な機能が表示されないようにするため
        description: |
          現在の実装では、拡張機能が常にアクティブになっている。
          リソースを効率的に使用し、ユーザー体験を向上させるため、
          カレントファイルの言語がYAMLの時にのみ、スニペットやコマンドが有効になるように変更する。
        status: Done
        points: 3
        sprint: Sprint 2
        definition of done:
          - "package.jsonのactivationEventsに`onLanguage:yaml`が追加されている"
          - "package.jsonのcontributes内のコマンドやメニューに`when`句が追加され、`editorLangId == 'yaml'`のコンテキストで表示されるように制限されている"
          - "スニペットがYAML言語に正しく関連付けられている"